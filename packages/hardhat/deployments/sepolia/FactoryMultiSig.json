{
  "address": "0x2A08a865e3e9667e58abFCCfDee2689CBF38d320",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CantFund",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "MultiSigWalletCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHAIN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_signaturesRequired",
          "type": "uint256"
        }
      ],
      "name": "createMultiSig",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getOwnedMultiSigs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mmswArray",
      "outputs": [
        {
          "internalType": "contract MetaMultiSigWallet",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc86e5c989ac5c117c0ca4931712f024dfea3c24ac95345aa2dac20f81f0c68c1",
  "receipt": {
    "to": null,
    "from": "0x656963BD7609a8Da4515DEB1191235f8CF1b78b5",
    "contractAddress": "0x2A08a865e3e9667e58abFCCfDee2689CBF38d320",
    "transactionIndex": 43,
    "gasUsed": "2022531",
    "logsBloom": "0x
    "blockHash": "0xad055a4d9d94a6d2cd0547b7fa8cb086a854d54e934a9f089a9625b1c4be3e8b",
    "transactionHash": "0xc86e5c989ac5c117c0ca4931712f024dfea3c24ac95345aa2dac20f81f0c68c1",
    "logs": [],
    "blockNumber": 5858529,
    "cumulativeGasUsed": "14405601",
    "status": 1,
    "byzantium": true
  },
  "args": [
    31337
  ],
  "numDeployments": 2,
  "solcInputHash": "e38dc711ab907fbfc084579fd4861f75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CantFund\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"MultiSigWalletCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_signaturesRequired\",\"type\":\"uint256\"}],\"name\":\"createMultiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnedMultiSigs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mmswArray\",\"outputs\":[{\"internalType\":\"contract MetaMultiSigWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FactoryMultiSig.sol\":\"FactoryMultiSig\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/FactoryMultiSig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./MetaMultiSigWallet.sol\\\";\\n\\ncontract FactoryMultiSig {\\n    MetaMultiSigWallet[] public mmswArray;\\n    \\n    // change this variable in the deployment script to your favorite chain id\\n    uint256 public immutable CHAIN_ID;\\n\\n    event MultiSigWalletCreated(address indexed walletAddress, address indexed creator);\\n    error CantFund();\\n\\n    constructor(uint256 _chainId ){\\n        CHAIN_ID = _chainId;\\n    }\\n\\n    function createMultiSig(address[] memory _owners, uint _signaturesRequired) public returns (address) {\\n        require(_owners.length > 0, \\\"createMultiSig: min one owner\\\");\\n        require(_signaturesRequired > 0 && _signaturesRequired <= _owners.length, \\\"createMultiSig: invalid # of signatures\\\");\\n        \\n        MetaMultiSigWallet mmsw = new MetaMultiSigWallet(CHAIN_ID, _owners, _signaturesRequired);\\n        mmswArray.push(mmsw);\\n        fund(address(mmsw));\\n        \\n        emit MultiSigWalletCreated(address(mmsw), msg.sender);\\n        return address(mmsw);\\n    }\\n\\n    function fund (address _wallet) private {\\n        if (address(this).balance >= 0.1 ether){\\n            (bool sent,) = _wallet.call{value: 0.1 ether}(\\\"\\\");\\n            if (!sent) revert CantFund();\\n        }\\n    }\\n\\n    // \\n    function getOwnedMultiSigs(address _owner) public view returns (address[] memory) {\\n        address[] memory ownedMS = new address[](mmswArray.length);\\n        uint count = 0;\\n        \\n        for (uint i = 0; i < mmswArray.length; ++i) {\\n            if (mmswArray[i].isOwner(_owner)){\\n                ownedMS[count++] = address(mmswArray[i]);\\n            }\\n        }\\n        \\n        // Resize the memory array to fit the actual number of owned multisigs\\n        address[] memory result = new address[](count);\\n        for (uint i = 0; i < count; ++i) {\\n            result[i] = ownedMS[i];\\n        }\\n        return result;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x658d7baa1d0d463e169c3f85a8cf4c03f7ea3431787f8bb89384a532996f3482\",\"license\":\"MIT\"},\"contracts/MetaMultiSigWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//  Off-chain signature gathering multisig that streams funds - @austingriffith\\n//\\n// started from \\ud83c\\udfd7 scaffold-eth - meta-multi-sig-wallet example https://github.com/austintgriffith/scaffold-eth/tree/meta-multi-sig\\n//    (off-chain signature based multi-sig)\\n//  added a very simple streaming mechanism where `onlySelf` can open a withdraw-based stream\\n//\\n\\npragma solidity >=0.8.0 <0.9.0;\\n// Not needed to be explicitly imported in Solidity 0.8.x\\n// pragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract MetaMultiSigWallet {\\n    using ECDSA for bytes32;\\n\\n    event Deposit(address indexed sender, uint amount, uint balance);\\n    event ExecuteTransaction(address indexed owner, address payable to, uint256 value, bytes data, uint256 nonce, bytes32 hash, bytes result);\\n    event Owner(address indexed owner, bool added);\\n    mapping(address => bool) public isOwner;\\n    uint public signaturesRequired;\\n    uint public nonce;\\n    uint public chainId;\\n\\n    constructor(uint256 _chainId, address[] memory _owners, uint _signaturesRequired) {\\n        require(_signaturesRequired > 0, \\\"constructor: must be non-zero sigs required\\\");\\n        signaturesRequired = _signaturesRequired;\\n        for (uint i = 0; i < _owners.length; i++) {\\n            address owner = _owners[i];\\n            require(owner != address(0), \\\"constructor: zero address\\\");\\n            require(!isOwner[owner], \\\"constructor: owner not unique\\\");\\n            isOwner[owner] = true;\\n            emit Owner(owner, isOwner[owner]);\\n        }\\n        chainId = _chainId;\\n    }\\n\\n    modifier onlySelf() {\\n        require(msg.sender == address(this), \\\"Not Self\\\");\\n        _;\\n    }\\n\\n    function addSigner(address newSigner, uint256 newSignaturesRequired) public onlySelf {\\n        require(newSigner != address(0), \\\"addSigner: zero address\\\");\\n        require(!isOwner[newSigner], \\\"addSigner: owner not unique\\\");\\n        require(newSignaturesRequired > 0, \\\"addSigner: must be non-zero sigs required\\\");\\n        isOwner[newSigner] = true;\\n        signaturesRequired = newSignaturesRequired;\\n        emit Owner(newSigner, isOwner[newSigner]);\\n    }\\n\\n    function removeSigner(address oldSigner, uint256 newSignaturesRequired) public onlySelf {\\n        require(isOwner[oldSigner], \\\"removeSigner: not owner\\\");\\n        require(newSignaturesRequired > 0, \\\"removeSigner: must be non-zero sigs required\\\");\\n        isOwner[oldSigner] = false;\\n        signaturesRequired = newSignaturesRequired;\\n        emit Owner(oldSigner, isOwner[oldSigner]);\\n    }\\n\\n    function updateSignaturesRequired(uint256 newSignaturesRequired) public onlySelf {\\n        require(newSignaturesRequired > 0, \\\"updateSignaturesRequired: must be non-zero sigs required\\\");\\n        signaturesRequired = newSignaturesRequired;\\n    }\\n\\n    function getTransactionHash(uint256 _nonce, address to, uint256 value, bytes memory data) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(address(this), chainId, _nonce, to, value, data));\\n    }\\n\\n    function executeTransaction(address payable to, uint256 value, bytes memory data, bytes[] memory signatures)\\n        public\\n        returns (bytes memory)\\n    {\\n        require(isOwner[msg.sender], \\\"executeTransaction: only owners can execute\\\");\\n        bytes32 _hash =  getTransactionHash(nonce, to, value, data);\\n        nonce++;\\n        uint256 validSignatures;\\n        address duplicateGuard;\\n        for (uint i = 0; i < signatures.length; i++) {\\n            address recovered = recover(_hash, signatures[i]);\\n            require(recovered > duplicateGuard, \\\"executeTransaction: duplicate or unordered signatures\\\");\\n            //hvz I think here there is a vulnerability, \\n            duplicateGuard = recovered;\\n            if(isOwner[recovered]){\\n              validSignatures++;\\n            }\\n        }\\n\\n        require(validSignatures>=signaturesRequired, \\\"executeTransaction: not enough valid signatures\\\");\\n\\n        (bool success, bytes memory result) = to.call{value: value}(data);\\n        require(success, \\\"executeTransaction: tx failed\\\");\\n\\n        emit ExecuteTransaction(msg.sender, to, value, data, nonce-1, _hash, result);\\n        return result;\\n    }\\n\\n    function recover(bytes32 _hash, bytes memory _signature) public pure returns (address) {\\n        return _hash.toEthSignedMessageHash().recover(_signature);\\n    }\\n\\n    receive() payable external {\\n        emit Deposit(msg.sender, msg.value, address(this).balance);\\n    }\\n\\n    //\\n    //  new streaming stuff\\n    //\\n\\n    event OpenStream(address indexed to, uint256 amount, uint256 frequency);\\n    event CloseStream(address indexed to);\\n    event Withdraw(address indexed to, uint256 amount, string reason);\\n\\n    struct Stream {\\n        uint256 amount;\\n        uint256 frequency;\\n        uint256 last;\\n    }\\n    mapping(address => Stream) public streams;\\n\\n    function streamWithdraw(uint256 amount, string memory reason) public {\\n        require(streams[msg.sender].amount > 0, \\\"withdraw: no open stream\\\");\\n        _streamWithdraw(payable(msg.sender), amount, reason);\\n    }\\n\\n    function _streamWithdraw(address payable to, uint256 amount, string memory reason) private {\\n        uint256 totalAmountCanWithdraw = streamBalance(to);\\n        require(totalAmountCanWithdraw >= amount,\\\"withdraw: not enough\\\");\\n        streams[to].last = streams[to].last + ((block.timestamp - streams[to].last) * amount / totalAmountCanWithdraw);\\n        emit Withdraw( to, amount, reason );\\n        to.transfer(amount);\\n    }\\n\\n    function streamBalance(address to) public view returns (uint256){\\n      return (streams[to].amount * (block.timestamp-streams[to].last)) / streams[to].frequency;\\n    }\\n\\n    function openStream(address to, uint256 amount, uint256 frequency) public onlySelf {\\n        require(streams[to].amount == 0, \\\"openStream: stream already open\\\");\\n        require(amount > 0, \\\"openStream: no amount\\\");\\n        require(frequency > 0, \\\"openStream: no frequency\\\");\\n\\n        streams[to].amount = amount;\\n        streams[to].frequency = frequency;\\n        streams[to].last = block.timestamp;\\n\\n        emit OpenStream(to, amount, frequency);\\n    }\\n\\n    function closeStream(address payable to) public onlySelf {\\n        require(streams[to].amount > 0, \\\"closeStream: stream already closed\\\");\\n        _streamWithdraw(to, streams[to].amount, \\\"stream closed\\\");\\n        delete streams[to];\\n        emit CloseStream(to);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x9b1dd60f3f19c8482714b7b8b0becbd947f8bba6b0b202462feda55d8339c09c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161241838038061241883398101604081905261002f91610037565b608052610050565b60006020828403121561004957600080fd5b5051919050565b6080516123a7610071600039600081816069015261043501526123a76000f3fe608060405260043610620000485760003560e01c806385e1f4d014620000555780638be5a018146200009e578063d46a09f114620000d2578063f43a8637146200011057600080fd5b366200005057005b600080fd5b3480156200006257600080fd5b506200008b7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b348015620000ab57600080fd5b50620000c3620000bd3660046200060c565b62000135565b60405162000095919062000677565b348015620000df57600080fd5b50620000f7620000f1366004620006a2565b62000369565b6040516001600160a01b03909116815260200162000095565b3480156200011d57600080fd5b50620000f76200012f3660046200077b565b62000522565b600080546060919067ffffffffffffffff8111156200015857620001586200068c565b60405190808252806020026020018201604052801562000182578160200160208202803683370190505b5090506000805b600054811015620002ab5760008181548110620001aa57620001aa62000795565b6000918252602090912001546040516317aa5fb760e11b81526001600160a01b03878116600483015290911690632f54bf6e90602401602060405180830381865afa158015620001fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002249190620007ab565b1562000298576000818154811062000240576200024062000795565b6000918252602090912001546001600160a01b031683836200026281620007cf565b94508151811062000277576200027762000795565b60200260200101906001600160a01b031690816001600160a01b0316815250505b620002a381620007cf565b905062000189565b5060008167ffffffffffffffff811115620002ca57620002ca6200068c565b604051908082528060200260200182016040528015620002f4578160200160208202803683370190505b50905060005b82811015620003605783818151811062000318576200031862000795565b602002602001015182828151811062000335576200033562000795565b6001600160a01b03909216602092830291909101909101526200035881620007cf565b9050620002fa565b50949350505050565b600080835111620003c15760405162461bcd60e51b815260206004820152601d60248201527f6372656174654d756c74695369673a206d696e206f6e65206f776e657200000060448201526064015b60405180910390fd5b600082118015620003d3575082518211155b620004315760405162461bcd60e51b815260206004820152602760248201527f6372656174654d756c74695369673a20696e76616c69642023206f66207369676044820152666e61747572657360c81b6064820152608401620003b8565b60007f000000000000000000000000000000000000000000000000000000000000000084846040516200046490620005e1565b6200047293929190620007f7565b604051809103906000f0801580156200048f573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0383161790559050620004e5816200054d565b60405133906001600160a01b038316907fbcff67f623bc915e136d6946628d56d8e7f2dd7c1db41f571852c726627dd57b90600090a39392505050565b600081815481106200053357600080fd5b6000918252602090912001546001600160a01b0316905081565b67016345785d8a00004710620005de576000816001600160a01b031667016345785d8a000060405160006040518083038185875af1925050503d8060008114620005b4576040519150601f19603f3d011682016040523d82523d6000602084013e620005b9565b606091505b5050905080620005dc5760405163bfb356bb60e01b815260040160405180910390fd5b505b50565b611b4f806200082383390190565b80356001600160a01b03811681146200060757600080fd5b919050565b6000602082840312156200061f57600080fd5b6200062a82620005ef565b9392505050565b600081518084526020808501945080840160005b838110156200066c5781516001600160a01b03168752958201959082019060010162000645565b509495945050505050565b6020815260006200062a602083018462000631565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620006b657600080fd5b823567ffffffffffffffff80821115620006cf57600080fd5b818501915085601f830112620006e457600080fd5b8135602082821115620006fb57620006fb6200068c565b8160051b604051601f19603f830116810181811086821117156200072357620007236200068c565b6040529283528183019350848101820192898411156200074257600080fd5b948201945b838610156200076b576200075b86620005ef565b8552948201949382019362000747565b9997909101359750505050505050565b6000602082840312156200078e57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215620007be57600080fd5b815180151581146200062a57600080fd5b600060018201620007f057634e487b7160e01b600052601160045260246000fd5b5060010190565b83815260606020820152600062000812606083018562000631565b905082604083015294935050505056fe60806040523480156200001157600080fd5b5060405162001b4f38038062001b4f83398101604081905262000034916200024d565b600081116200009e5760405162461bcd60e51b815260206004820152602b60248201527f636f6e7374727563746f723a206d757374206265206e6f6e2d7a65726f20736960448201526a19dcc81c995c5d5a5c995960aa1b60648201526084015b60405180910390fd5b600181905560005b82518110156200020e576000838281518110620000c757620000c762000336565b6020026020010151905060006001600160a01b0316816001600160a01b031603620001355760405162461bcd60e51b815260206004820152601960248201527f636f6e7374727563746f723a207a65726f206164647265737300000000000000604482015260640162000095565b6001600160a01b03811660009081526020819052604090205460ff1615620001a05760405162461bcd60e51b815260206004820152601d60248201527f636f6e7374727563746f723a206f776e6572206e6f7420756e69717565000000604482015260640162000095565b6001600160a01b03811660008181526020818152604091829020805460ff1916600190811790915591519182527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e910160405180910390a2508062000205816200034c565b915050620000a6565b50505060035562000374565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200024857600080fd5b919050565b6000806000606084860312156200026357600080fd5b8351602080860151919450906001600160401b03808211156200028557600080fd5b818701915087601f8301126200029a57600080fd5b815181811115620002af57620002af6200021a565b8060051b604051601f19603f83011681018181108582111715620002d757620002d76200021a565b60405291825284820192508381018501918a831115620002f657600080fd5b938501935b828510156200031f576200030f8562000230565b84529385019392850192620002fb565b809750505050505050604084015190509250925092565b634e487b7160e01b600052603260045260246000fd5b6000600182016200036d57634e487b7160e01b600052601160045260246000fd5b5060010190565b6117cb80620003846000396000f3fe6080604052600436106100ec5760003560e01c8063836992751161008a578063ce757d2911610059578063ce757d2914610302578063d1fbffa014610318578063de4b9e9314610345578063e0a2ff541461036557600080fd5b8063836992751461025f5780639a8a0592146102b6578063a8397ddc146102cc578063affed0e0146102ec57600080fd5b80633034a742116100c65780633034a742146101d15780633bad5426146101f1578063545a4a3c1461021157806365af1bed1461023f57600080fd5b806319045a25146101325780632a387d5d1461016f5780632f54bf6e1461019157600080fd5b3661012d576040805134815247602082015233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2005b600080fd5b34801561013e57600080fd5b5061015261014d3660046112ba565b610385565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017b57600080fd5b5061018f61018a366004611316565b6103c7565b005b34801561019d57600080fd5b506101c16101ac36600461134b565b60006020819052908152604090205460ff1681565b6040519015158152602001610166565b3480156101dd57600080fd5b5061018f6101ec36600461136f565b610555565b3480156101fd57600080fd5b5061018f61020c366004611388565b6105ef565b34801561021d57600080fd5b5061023161022c3660046113b4565b61073e565b604051908152602001610166565b34801561024b57600080fd5b5061018f61025a366004611388565b61077d565b34801561026b57600080fd5b5061029b61027a36600461134b565b60046020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610166565b3480156102c257600080fd5b5061023160035481565b3480156102d857600080fd5b5061018f6102e7366004611417565b61091b565b3480156102f857600080fd5b5061023160025481565b34801561030e57600080fd5b5061023160015481565b34801561032457600080fd5b50610338610333366004611468565b610986565b60405161016691906115bc565b34801561035157600080fd5b5061018f61036036600461134b565b610ca0565b34801561037157600080fd5b5061023161038036600461134b565b610dd8565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c839052603c81206103be9083610e32565b90505b92915050565b3330146103ef5760405162461bcd60e51b81526004016103e6906115cf565b60405180910390fd5b6001600160a01b038316600090815260046020526040902054156104555760405162461bcd60e51b815260206004820152601f60248201527f6f70656e53747265616d3a2073747265616d20616c7265616479206f70656e0060448201526064016103e6565b6000821161049d5760405162461bcd60e51b81526020600482015260156024820152741bdc195b94dd1c99585b4e881b9bc8185b5bdd5b9d605a1b60448201526064016103e6565b600081116104ed5760405162461bcd60e51b815260206004820152601860248201527f6f70656e53747265616d3a206e6f206672657175656e6379000000000000000060448201526064016103e6565b6001600160a01b038316600081815260046020908152604091829020858155600181018590554260029091015581518581529081018490527f81236f9eb471668cf00861415085dace409d719678881c59b03e49683bbef716910160405180910390a2505050565b3330146105745760405162461bcd60e51b81526004016103e6906115cf565b600081116105ea5760405162461bcd60e51b815260206004820152603860248201527f7570646174655369676e61747572657352657175697265643a206d757374206260448201527f65206e6f6e2d7a65726f2073696773207265717569726564000000000000000060648201526084016103e6565b600155565b33301461060e5760405162461bcd60e51b81526004016103e6906115cf565b6001600160a01b03821660009081526020819052604090205460ff166106765760405162461bcd60e51b815260206004820152601760248201527f72656d6f76655369676e65723a206e6f74206f776e657200000000000000000060448201526064016103e6565b600081116106db5760405162461bcd60e51b815260206004820152602c60248201527f72656d6f76655369676e65723a206d757374206265206e6f6e2d7a65726f207360448201526b1a59dcc81c995c5d5a5c995960a21b60648201526084016103e6565b6001600160a01b03821660008181526020818152604091829020805460ff19168155600185905554915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e91015b60405180910390a25050565b6000306003548686868660405160200161075d969594939291906115f1565b604051602081830303815290604052805190602001209050949350505050565b33301461079c5760405162461bcd60e51b81526004016103e6906115cf565b6001600160a01b0382166107f25760405162461bcd60e51b815260206004820152601760248201527f6164645369676e65723a207a65726f206164647265737300000000000000000060448201526064016103e6565b6001600160a01b03821660009081526020819052604090205460ff161561085b5760405162461bcd60e51b815260206004820152601b60248201527f6164645369676e65723a206f776e6572206e6f7420756e69717565000000000060448201526064016103e6565b600081116108bd5760405162461bcd60e51b815260206004820152602960248201527f6164645369676e65723a206d757374206265206e6f6e2d7a65726f2073696773604482015268081c995c5d5a5c995960ba1b60648201526084016103e6565b6001600160a01b03821660008181526020818152604091829020805460ff19166001908117825585905554915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e9101610732565b336000908152600460205260409020546109775760405162461bcd60e51b815260206004820152601860248201527f77697468647261773a206e6f206f70656e2073747265616d000000000000000060448201526064016103e6565b610982338383610e56565b5050565b3360009081526020819052604090205460609060ff166109fc5760405162461bcd60e51b815260206004820152602b60248201527f657865637574655472616e73616374696f6e3a206f6e6c79206f776e6572732060448201526a63616e206578656375746560a81b60648201526084016103e6565b6000610a0c60025487878761073e565b600280549192506000610a1e83611662565b919050555060008060005b8551811015610b1f576000610a5785888481518110610a4a57610a4a61167b565b6020026020010151610385565b9050826001600160a01b0316816001600160a01b031611610ad85760405162461bcd60e51b815260206004820152603560248201527f657865637574655472616e73616374696f6e3a206475706c6963617465206f7260448201527420756e6f726465726564207369676e61747572657360581b60648201526084016103e6565b6001600160a01b038116600090815260208190526040902054909250829060ff1615610b0c5783610b0881611662565b9450505b5080610b1781611662565b915050610a29565b50600154821015610b8a5760405162461bcd60e51b815260206004820152602f60248201527f657865637574655472616e73616374696f6e3a206e6f7420656e6f756768207660448201526e616c6964207369676e61747572657360881b60648201526084016103e6565b600080896001600160a01b03168989604051610ba69190611691565b60006040518083038185875af1925050503d8060008114610be3576040519150601f19603f3d011682016040523d82523d6000602084013e610be8565b606091505b509150915081610c3a5760405162461bcd60e51b815260206004820152601d60248201527f657865637574655472616e73616374696f6e3a207478206661696c656400000060448201526064016103e6565b336001600160a01b03167f9053e9ec105157fac8c9308d63e6b22be5f50fe915a3e567419b624311a02d748b8b8b6001600254610c7791906116ad565b8a87604051610c8b969594939291906116c0565b60405180910390a29998505050505050505050565b333014610cbf5760405162461bcd60e51b81526004016103e6906115cf565b6001600160a01b038116600090815260046020526040902054610d2f5760405162461bcd60e51b815260206004820152602260248201527f636c6f736553747265616d3a2073747265616d20616c726561647920636c6f73604482015261195960f21b60648201526084016103e6565b610d878160046000846001600160a01b03166001600160a01b03168152602001908152602001600020600001546040518060400160405280600d81526020016c1cdd1c99585b4818db1bdcd959609a1b815250610e56565b6001600160a01b03811660008181526004602052604080822082815560018101839055600201829055517fcc362a45d32c94d02a329570bd5935709d77f6dc79ac6afa5107b513642461c29190a250565b6001600160a01b03811660009081526004602052604081206001810154600290910154610e0590426116ad565b6001600160a01b038416600090815260046020526040902054610e289190611712565b6103c19190611729565b6000806000610e418585610fa5565b91509150610e4e81610fea565b509392505050565b6000610e6184610dd8565b905082811015610eaa5760405162461bcd60e51b81526020600482015260146024820152730eed2e8d0c8e4c2ee7440dcdee840cadcdeeaced60631b60448201526064016103e6565b6001600160a01b03841660009081526004602052604090206002015481908490610ed490426116ad565b610ede9190611712565b610ee89190611729565b6001600160a01b038516600090815260046020526040902060020154610f0e919061174b565b6001600160a01b038516600081815260046020526040908190206002019290925590517f485f1bb6524c663555797e00171a10f341656e59b02d6b557a0a38ba7d5d975190610f60908690869061175e565b60405180910390a26040516001600160a01b0385169084156108fc029085906000818181858888f19350505050158015610f9e573d6000803e3d6000fd5b5050505050565b6000808251604103610fdb5760208301516040840151606085015160001a610fcf87828585611137565b94509450505050610fe3565b506000905060025b9250929050565b6000816004811115610ffe57610ffe61177f565b036110065750565b600181600481111561101a5761101a61177f565b036110675760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016103e6565b600281600481111561107b5761107b61177f565b036110c85760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103e6565b60038160048111156110dc576110dc61177f565b036111345760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103e6565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561116e57506000905060036111f2565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156111c2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166111eb576000600192509250506111f2565b9150600090505b94509492505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561123a5761123a6111fb565b604052919050565b600067ffffffffffffffff83111561125c5761125c6111fb565b61126f601f8401601f1916602001611211565b905082815283838301111561128357600080fd5b828260208301376000602084830101529392505050565b600082601f8301126112ab57600080fd5b6103be83833560208501611242565b600080604083850312156112cd57600080fd5b82359150602083013567ffffffffffffffff8111156112eb57600080fd5b6112f78582860161129a565b9150509250929050565b6001600160a01b038116811461113457600080fd5b60008060006060848603121561132b57600080fd5b833561133681611301565b95602085013595506040909401359392505050565b60006020828403121561135d57600080fd5b813561136881611301565b9392505050565b60006020828403121561138157600080fd5b5035919050565b6000806040838503121561139b57600080fd5b82356113a681611301565b946020939093013593505050565b600080600080608085870312156113ca57600080fd5b8435935060208501356113dc81611301565b925060408501359150606085013567ffffffffffffffff8111156113ff57600080fd5b61140b8782880161129a565b91505092959194509250565b6000806040838503121561142a57600080fd5b82359150602083013567ffffffffffffffff81111561144857600080fd5b8301601f8101851361145957600080fd5b6112f785823560208401611242565b6000806000806080858703121561147e57600080fd5b843561148981611301565b93506020858101359350604086013567ffffffffffffffff808211156114ae57600080fd5b6114ba89838a0161129a565b945060608801359150808211156114d057600080fd5b818801915088601f8301126114e457600080fd5b8135818111156114f6576114f66111fb565b8060051b611505858201611211565b918252838101850191858101908c84111561151f57600080fd5b86860192505b8383101561155b5782358581111561153d5760008081fd5b61154b8e89838a010161129a565b8352509186019190860190611525565b999c989b5096995050505050505050565b60005b8381101561158757818101518382015260200161156f565b50506000910152565b600081518084526115a881602086016020860161156c565b601f01601f19169290920160200192915050565b6020815260006103be6020830184611590565b6020808252600890820152672737ba1029b2b63360c11b604082015260600190565b60006bffffffffffffffffffffffff19808960601b168352876014840152866034840152808660601b16605484015250836068830152825161163a81608885016020870161156c565b91909101608801979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016116745761167461164c565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600082516116a381846020870161156c565b9190910192915050565b818103818111156103c1576103c161164c565b60018060a01b038716815285602082015260c0604082015260006116e760c0830187611590565b85606084015284608084015282810360a08401526117058185611590565b9998505050505050505050565b80820281158282048414176103c1576103c161164c565b60008261174657634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156103c1576103c161164c565b8281526040602082015260006117776040830184611590565b949350505050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212201e84cacdcb1ec3fc4c0963ab5426a57912f7a96f813d56c9ef0191e7e49ef1ae64736f6c63430008110033a264697066735822122058cf3ff8bc5ad5dc7202d09b2a9cc79ad8e5fdc91ac42963da398793d6f8863864736f6c63430008110033",
  "deployedBytecode": "0x608060405260043610620000485760003560e01c806385e1f4d014620000555780638be5a018146200009e578063d46a09f114620000d2578063f43a8637146200011057600080fd5b366200005057005b600080fd5b3480156200006257600080fd5b506200008b7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b348015620000ab57600080fd5b50620000c3620000bd3660046200060c565b62000135565b60405162000095919062000677565b348015620000df57600080fd5b50620000f7620000f1366004620006a2565b62000369565b6040516001600160a01b03909116815260200162000095565b3480156200011d57600080fd5b50620000f76200012f3660046200077b565b62000522565b600080546060919067ffffffffffffffff8111156200015857620001586200068c565b60405190808252806020026020018201604052801562000182578160200160208202803683370190505b5090506000805b600054811015620002ab5760008181548110620001aa57620001aa62000795565b6000918252602090912001546040516317aa5fb760e11b81526001600160a01b03878116600483015290911690632f54bf6e90602401602060405180830381865afa158015620001fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002249190620007ab565b1562000298576000818154811062000240576200024062000795565b6000918252602090912001546001600160a01b031683836200026281620007cf565b94508151811062000277576200027762000795565b60200260200101906001600160a01b031690816001600160a01b0316815250505b620002a381620007cf565b905062000189565b5060008167ffffffffffffffff811115620002ca57620002ca6200068c565b604051908082528060200260200182016040528015620002f4578160200160208202803683370190505b50905060005b82811015620003605783818151811062000318576200031862000795565b602002602001015182828151811062000335576200033562000795565b6001600160a01b03909216602092830291909101909101526200035881620007cf565b9050620002fa565b50949350505050565b600080835111620003c15760405162461bcd60e51b815260206004820152601d60248201527f6372656174654d756c74695369673a206d696e206f6e65206f776e657200000060448201526064015b60405180910390fd5b600082118015620003d3575082518211155b620004315760405162461bcd60e51b815260206004820152602760248201527f6372656174654d756c74695369673a20696e76616c69642023206f66207369676044820152666e61747572657360c81b6064820152608401620003b8565b60007f000000000000000000000000000000000000000000000000000000000000000084846040516200046490620005e1565b6200047293929190620007f7565b604051809103906000f0801580156200048f573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0383161790559050620004e5816200054d565b60405133906001600160a01b038316907fbcff67f623bc915e136d6946628d56d8e7f2dd7c1db41f571852c726627dd57b90600090a39392505050565b600081815481106200053357600080fd5b6000918252602090912001546001600160a01b0316905081565b67016345785d8a00004710620005de576000816001600160a01b031667016345785d8a000060405160006040518083038185875af1925050503d8060008114620005b4576040519150601f19603f3d011682016040523d82523d6000602084013e620005b9565b606091505b5050905080620005dc5760405163bfb356bb60e01b815260040160405180910390fd5b505b50565b611b4f806200082383390190565b80356001600160a01b03811681146200060757600080fd5b919050565b6000602082840312156200061f57600080fd5b6200062a82620005ef565b9392505050565b600081518084526020808501945080840160005b838110156200066c5781516001600160a01b03168752958201959082019060010162000645565b509495945050505050565b6020815260006200062a602083018462000631565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620006b657600080fd5b823567ffffffffffffffff80821115620006cf57600080fd5b818501915085601f830112620006e457600080fd5b8135602082821115620006fb57620006fb6200068c565b8160051b604051601f19603f830116810181811086821117156200072357620007236200068c565b6040529283528183019350848101820192898411156200074257600080fd5b948201945b838610156200076b576200075b86620005ef565b8552948201949382019362000747565b9997909101359750505050505050565b6000602082840312156200078e57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215620007be57600080fd5b815180151581146200062a57600080fd5b600060018201620007f057634e487b7160e01b600052601160045260246000fd5b5060010190565b83815260606020820152600062000812606083018562000631565b905082604083015294935050505056fe60806040523480156200001157600080fd5b5060405162001b4f38038062001b4f83398101604081905262000034916200024d565b600081116200009e5760405162461bcd60e51b815260206004820152602b60248201527f636f6e7374727563746f723a206d757374206265206e6f6e2d7a65726f20736960448201526a19dcc81c995c5d5a5c995960aa1b60648201526084015b60405180910390fd5b600181905560005b82518110156200020e576000838281518110620000c757620000c762000336565b6020026020010151905060006001600160a01b0316816001600160a01b031603620001355760405162461bcd60e51b815260206004820152601960248201527f636f6e7374727563746f723a207a65726f206164647265737300000000000000604482015260640162000095565b6001600160a01b03811660009081526020819052604090205460ff1615620001a05760405162461bcd60e51b815260206004820152601d60248201527f636f6e7374727563746f723a206f776e6572206e6f7420756e69717565000000604482015260640162000095565b6001600160a01b03811660008181526020818152604091829020805460ff1916600190811790915591519182527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e910160405180910390a2508062000205816200034c565b915050620000a6565b50505060035562000374565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200024857600080fd5b919050565b6000806000606084860312156200026357600080fd5b8351602080860151919450906001600160401b03808211156200028557600080fd5b818701915087601f8301126200029a57600080fd5b815181811115620002af57620002af6200021a565b8060051b604051601f19603f83011681018181108582111715620002d757620002d76200021a565b60405291825284820192508381018501918a831115620002f657600080fd5b938501935b828510156200031f576200030f8562000230565b84529385019392850192620002fb565b809750505050505050604084015190509250925092565b634e487b7160e01b600052603260045260246000fd5b6000600182016200036d57634e487b7160e01b600052601160045260246000fd5b5060010190565b6117cb80620003846000396000f3fe6080604052600436106100ec5760003560e01c8063836992751161008a578063ce757d2911610059578063ce757d2914610302578063d1fbffa014610318578063de4b9e9314610345578063e0a2ff541461036557600080fd5b8063836992751461025f5780639a8a0592146102b6578063a8397ddc146102cc578063affed0e0146102ec57600080fd5b80633034a742116100c65780633034a742146101d15780633bad5426146101f1578063545a4a3c1461021157806365af1bed1461023f57600080fd5b806319045a25146101325780632a387d5d1461016f5780632f54bf6e1461019157600080fd5b3661012d576040805134815247602082015233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2005b600080fd5b34801561013e57600080fd5b5061015261014d3660046112ba565b610385565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017b57600080fd5b5061018f61018a366004611316565b6103c7565b005b34801561019d57600080fd5b506101c16101ac36600461134b565b60006020819052908152604090205460ff1681565b6040519015158152602001610166565b3480156101dd57600080fd5b5061018f6101ec36600461136f565b610555565b3480156101fd57600080fd5b5061018f61020c366004611388565b6105ef565b34801561021d57600080fd5b5061023161022c3660046113b4565b61073e565b604051908152602001610166565b34801561024b57600080fd5b5061018f61025a366004611388565b61077d565b34801561026b57600080fd5b5061029b61027a36600461134b565b60046020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610166565b3480156102c257600080fd5b5061023160035481565b3480156102d857600080fd5b5061018f6102e7366004611417565b61091b565b3480156102f857600080fd5b5061023160025481565b34801561030e57600080fd5b5061023160015481565b34801561032457600080fd5b50610338610333366004611468565b610986565b60405161016691906115bc565b34801561035157600080fd5b5061018f61036036600461134b565b610ca0565b34801561037157600080fd5b5061023161038036600461134b565b610dd8565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c839052603c81206103be9083610e32565b90505b92915050565b3330146103ef5760405162461bcd60e51b81526004016103e6906115cf565b60405180910390fd5b6001600160a01b038316600090815260046020526040902054156104555760405162461bcd60e51b815260206004820152601f60248201527f6f70656e53747265616d3a2073747265616d20616c7265616479206f70656e0060448201526064016103e6565b6000821161049d5760405162461bcd60e51b81526020600482015260156024820152741bdc195b94dd1c99585b4e881b9bc8185b5bdd5b9d605a1b60448201526064016103e6565b600081116104ed5760405162461bcd60e51b815260206004820152601860248201527f6f70656e53747265616d3a206e6f206672657175656e6379000000000000000060448201526064016103e6565b6001600160a01b038316600081815260046020908152604091829020858155600181018590554260029091015581518581529081018490527f81236f9eb471668cf00861415085dace409d719678881c59b03e49683bbef716910160405180910390a2505050565b3330146105745760405162461bcd60e51b81526004016103e6906115cf565b600081116105ea5760405162461bcd60e51b815260206004820152603860248201527f7570646174655369676e61747572657352657175697265643a206d757374206260448201527f65206e6f6e2d7a65726f2073696773207265717569726564000000000000000060648201526084016103e6565b600155565b33301461060e5760405162461bcd60e51b81526004016103e6906115cf565b6001600160a01b03821660009081526020819052604090205460ff166106765760405162461bcd60e51b815260206004820152601760248201527f72656d6f76655369676e65723a206e6f74206f776e657200000000000000000060448201526064016103e6565b600081116106db5760405162461bcd60e51b815260206004820152602c60248201527f72656d6f76655369676e65723a206d757374206265206e6f6e2d7a65726f207360448201526b1a59dcc81c995c5d5a5c995960a21b60648201526084016103e6565b6001600160a01b03821660008181526020818152604091829020805460ff19168155600185905554915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e91015b60405180910390a25050565b6000306003548686868660405160200161075d969594939291906115f1565b604051602081830303815290604052805190602001209050949350505050565b33301461079c5760405162461bcd60e51b81526004016103e6906115cf565b6001600160a01b0382166107f25760405162461bcd60e51b815260206004820152601760248201527f6164645369676e65723a207a65726f206164647265737300000000000000000060448201526064016103e6565b6001600160a01b03821660009081526020819052604090205460ff161561085b5760405162461bcd60e51b815260206004820152601b60248201527f6164645369676e65723a206f776e6572206e6f7420756e69717565000000000060448201526064016103e6565b600081116108bd5760405162461bcd60e51b815260206004820152602960248201527f6164645369676e65723a206d757374206265206e6f6e2d7a65726f2073696773604482015268081c995c5d5a5c995960ba1b60648201526084016103e6565b6001600160a01b03821660008181526020818152604091829020805460ff19166001908117825585905554915160ff909216151582527ffe545f48304051c4029eb2da9927daa59da0414b4b084fdceaf2955b609b899e9101610732565b336000908152600460205260409020546109775760405162461bcd60e51b815260206004820152601860248201527f77697468647261773a206e6f206f70656e2073747265616d000000000000000060448201526064016103e6565b610982338383610e56565b5050565b3360009081526020819052604090205460609060ff166109fc5760405162461bcd60e51b815260206004820152602b60248201527f657865637574655472616e73616374696f6e3a206f6e6c79206f776e6572732060448201526a63616e206578656375746560a81b60648201526084016103e6565b6000610a0c60025487878761073e565b600280549192506000610a1e83611662565b919050555060008060005b8551811015610b1f576000610a5785888481518110610a4a57610a4a61167b565b6020026020010151610385565b9050826001600160a01b0316816001600160a01b031611610ad85760405162461bcd60e51b815260206004820152603560248201527f657865637574655472616e73616374696f6e3a206475706c6963617465206f7260448201527420756e6f726465726564207369676e61747572657360581b60648201526084016103e6565b6001600160a01b038116600090815260208190526040902054909250829060ff1615610b0c5783610b0881611662565b9450505b5080610b1781611662565b915050610a29565b50600154821015610b8a5760405162461bcd60e51b815260206004820152602f60248201527f657865637574655472616e73616374696f6e3a206e6f7420656e6f756768207660448201526e616c6964207369676e61747572657360881b60648201526084016103e6565b600080896001600160a01b03168989604051610ba69190611691565b60006040518083038185875af1925050503d8060008114610be3576040519150601f19603f3d011682016040523d82523d6000602084013e610be8565b606091505b509150915081610c3a5760405162461bcd60e51b815260206004820152601d60248201527f657865637574655472616e73616374696f6e3a207478206661696c656400000060448201526064016103e6565b336001600160a01b03167f9053e9ec105157fac8c9308d63e6b22be5f50fe915a3e567419b624311a02d748b8b8b6001600254610c7791906116ad565b8a87604051610c8b969594939291906116c0565b60405180910390a29998505050505050505050565b333014610cbf5760405162461bcd60e51b81526004016103e6906115cf565b6001600160a01b038116600090815260046020526040902054610d2f5760405162461bcd60e51b815260206004820152602260248201527f636c6f736553747265616d3a2073747265616d20616c726561647920636c6f73604482015261195960f21b60648201526084016103e6565b610d878160046000846001600160a01b03166001600160a01b03168152602001908152602001600020600001546040518060400160405280600d81526020016c1cdd1c99585b4818db1bdcd959609a1b815250610e56565b6001600160a01b03811660008181526004602052604080822082815560018101839055600201829055517fcc362a45d32c94d02a329570bd5935709d77f6dc79ac6afa5107b513642461c29190a250565b6001600160a01b03811660009081526004602052604081206001810154600290910154610e0590426116ad565b6001600160a01b038416600090815260046020526040902054610e289190611712565b6103c19190611729565b6000806000610e418585610fa5565b91509150610e4e81610fea565b509392505050565b6000610e6184610dd8565b905082811015610eaa5760405162461bcd60e51b81526020600482015260146024820152730eed2e8d0c8e4c2ee7440dcdee840cadcdeeaced60631b60448201526064016103e6565b6001600160a01b03841660009081526004602052604090206002015481908490610ed490426116ad565b610ede9190611712565b610ee89190611729565b6001600160a01b038516600090815260046020526040902060020154610f0e919061174b565b6001600160a01b038516600081815260046020526040908190206002019290925590517f485f1bb6524c663555797e00171a10f341656e59b02d6b557a0a38ba7d5d975190610f60908690869061175e565b60405180910390a26040516001600160a01b0385169084156108fc029085906000818181858888f19350505050158015610f9e573d6000803e3d6000fd5b5050505050565b6000808251604103610fdb5760208301516040840151606085015160001a610fcf87828585611137565b94509450505050610fe3565b506000905060025b9250929050565b6000816004811115610ffe57610ffe61177f565b036110065750565b600181600481111561101a5761101a61177f565b036110675760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016103e6565b600281600481111561107b5761107b61177f565b036110c85760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103e6565b60038160048111156110dc576110dc61177f565b036111345760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103e6565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561116e57506000905060036111f2565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156111c2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166111eb576000600192509250506111f2565b9150600090505b94509492505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561123a5761123a6111fb565b604052919050565b600067ffffffffffffffff83111561125c5761125c6111fb565b61126f601f8401601f1916602001611211565b905082815283838301111561128357600080fd5b828260208301376000602084830101529392505050565b600082601f8301126112ab57600080fd5b6103be83833560208501611242565b600080604083850312156112cd57600080fd5b82359150602083013567ffffffffffffffff8111156112eb57600080fd5b6112f78582860161129a565b9150509250929050565b6001600160a01b038116811461113457600080fd5b60008060006060848603121561132b57600080fd5b833561133681611301565b95602085013595506040909401359392505050565b60006020828403121561135d57600080fd5b813561136881611301565b9392505050565b60006020828403121561138157600080fd5b5035919050565b6000806040838503121561139b57600080fd5b82356113a681611301565b946020939093013593505050565b600080600080608085870312156113ca57600080fd5b8435935060208501356113dc81611301565b925060408501359150606085013567ffffffffffffffff8111156113ff57600080fd5b61140b8782880161129a565b91505092959194509250565b6000806040838503121561142a57600080fd5b82359150602083013567ffffffffffffffff81111561144857600080fd5b8301601f8101851361145957600080fd5b6112f785823560208401611242565b6000806000806080858703121561147e57600080fd5b843561148981611301565b93506020858101359350604086013567ffffffffffffffff808211156114ae57600080fd5b6114ba89838a0161129a565b945060608801359150808211156114d057600080fd5b818801915088601f8301126114e457600080fd5b8135818111156114f6576114f66111fb565b8060051b611505858201611211565b918252838101850191858101908c84111561151f57600080fd5b86860192505b8383101561155b5782358581111561153d5760008081fd5b61154b8e89838a010161129a565b8352509186019190860190611525565b999c989b5096995050505050505050565b60005b8381101561158757818101518382015260200161156f565b50506000910152565b600081518084526115a881602086016020860161156c565b601f01601f19169290920160200192915050565b6020815260006103be6020830184611590565b6020808252600890820152672737ba1029b2b63360c11b604082015260600190565b60006bffffffffffffffffffffffff19808960601b168352876014840152866034840152808660601b16605484015250836068830152825161163a81608885016020870161156c565b91909101608801979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016116745761167461164c565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600082516116a381846020870161156c565b9190910192915050565b818103818111156103c1576103c161164c565b60018060a01b038716815285602082015260c0604082015260006116e760c0830187611590565b85606084015284608084015282810360a08401526117058185611590565b9998505050505050505050565b80820281158282048414176103c1576103c161164c565b60008261174657634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156103c1576103c161164c565b8281526040602082015260006117776040830184611590565b949350505050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212201e84cacdcb1ec3fc4c0963ab5426a57912f7a96f813d56c9ef0191e7e49ef1ae64736f6c63430008110033a264697066735822122058cf3ff8bc5ad5dc7202d09b2a9cc79ad8e5fdc91ac42963da398793d6f8863864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1572,
        "contract": "contracts/FactoryMultiSig.sol:FactoryMultiSig",
        "label": "mmswArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(MetaMultiSigWallet)2467)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_contract(MetaMultiSigWallet)2467)dyn_storage": {
        "base": "t_contract(MetaMultiSigWallet)2467",
        "encoding": "dynamic_array",
        "label": "contract MetaMultiSigWallet[]",
        "numberOfBytes": "32"
      },
      "t_contract(MetaMultiSigWallet)2467": {
        "encoding": "inplace",
        "label": "contract MetaMultiSigWallet",
        "numberOfBytes": "20"
      }
    }
  }
}